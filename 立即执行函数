立即执行函数，他的好处如下：

1、立即执行函数模式被广泛使用，它可以帮你封装大量的工作而不会在背后遗留任何全局变量。
2、定义的所有变量都会成员立即执行函数的局部变量，所以你不用担心这些临时变量会污染全局空间。
 
3、这种模式经常被使用在书签工具(bookmarklets)中，因为书签工具在任何页面上运行并且保持全局命名空间干净是非常必要的；
 
4、这种模式也可以让你将独立的功能封装在自包含模块中。
 
5、可以将这些代码封装进一个立即执行函数中，并且确保页面没有它的情况下也能正常工作。
6、可以添加更多的加强模块，移除它们，单独测试它们，允许用户去禁用它们等等。


js自执行函数的几种不同写法的比较

方法1：最前最后加括号

代码如下:

(function(){alert(1);}());

调用函数，得到返回值。强制运算符使函数调用执行

(function(x,y){
    alert(x+y);
    return x+y;
}(3,4));

这是jslint推荐的写法，好处是，能提醒阅读代码的人，这段代码是一个整体。
例如，在有语法高亮匹配功能的编辑器里，光标在第一个左括号后时，最后一个右括号也会高亮，看代码的人一眼就可以看到这个整体。
不过，对于某些写代码不喜欢在行后加分号的同学，也会形成一些坑坑，例如以下代码会报运行错：
代码如下:

var a=1
(function(){alert(1);}());


方法2：function外面加括号

代码如下:

(function(){alert(1);})();

调用函数，得到返回值。强制函数直接量执行再返回一个引用，引用再去调用执行

(function(x,y){
    alert(x+y);
    return x+y;
})(3,4);

这种方式也是很多库爱用的调用方式，如jQuery，Mootools。

这种做法比方法1少了一个代码整体性的好处。

方法3：function前面加运算符，常见的是!与void 。
复制代码 代码如下:

!function(){alert(1);}();
void function(){alert(2);}();

更多匿名自执行方式如下：

方式4，使用-/+运算符
	
-function(x,y){
    alert(x+y);
    return x+y;
}(3,4);
 
+function(x,y){
    alert(x+y);
    return x+y;
}(3,4);
 
--function(x,y){
    alert(x+y);
    return x+y;
}(3,4);
 
++function(x,y){
    alert(x+y);
    return x+y;
}(3,4);

方式5，使用波浪符(~)

~function(x, y) {
    alert(x+y);
   return x+y;
}(3, 4);

方式6，匿名函数执行放在中括号内

[function(){
   console.log(this) // 浏览器得控制台输出window
}(this)]

方式7，匿名函数前加typeof

typeof function(){
   console.log(this) // 浏览器得控制台输出window
}(this)

方式8，匿名函数前加delete
	
delete function(){
   console.log(this) // 浏览器得控制台输出window
}(this)

方式9，使用new方式，传参
	
new function(win){
   console.log(win) // window
}(this)

方式10，使用new，不传参
	
new function(){
    console.log(this) // 这里的this就不是window了
}

方式11，逗号运算符
	
1, function(){
    console.log(this) // window
}();

方式12，按位异或运算符
	
1^function(){
    console.log(this) // window
}();

方式13，比较运算符
	
1>function(){
    console.log(this) // window
}();


PS:   JSLint
JSLint定义了一组编码约定，这比ECMA定义的语言更为严格。这些编码约定汲取了多年来的丰富编码经验，并以一条年代久远的编程原则 作为宗旨：能做并不意味着应该做。JSLint会对它认为有的编码实践加标志，另外还会指出哪些是明显的错误，从而促使你养成好的 JavaScript编码习惯。

JSLint可能会把一些结构方面的错误标志为可疑的编码实践，以下列出了其中一部分（完整的列表可以参考JSLint的文档）。

JSLint要求所有代码行都以分号结束。尽管JavaScript确实允许将换行符作为行结束符，但一般认为这种做法是不明确的，而且是不好的编码风格。

使用if和for的语句必须使用大括号把语句块括起来。

不同于其他编程语言，在JavaScript中，块不会作为变量的作用域。JavaScript只支持函数级作用域。因此，JSLint只接受作为function、if、switch、while、for、do和try语句一部分的块，其他的块都会标志为错误。

var只能声明一次，而且在使用之前必须声明。

JSLint会把出现在return、break、continue或throw语句后面的代码标志为不可达的代码。这些语句后面必须紧跟一个结束大括号。

对于JavaScript来说，JSLint是一个非常好的工具，因为它会教你一些好的JavaScript编码实践。由于JSLint能 把可能导致逻辑错误或其他未预见行为的部分标出来，因此可以减少调试时间。如果你调试一段JavaScript代码时遇到困难，可以试试JSLint。

参考资料：
1、http://blog.csdn.net/zlj526/article/details/45044345
2、http://www.jb51.net/article/31078.htm
3、http://baike.baidu.com/link?url=W-r7N79KV7v-L1dHSTQgyI4YQeAdncUsPUmwF_VTS8zm-kX1UPuc7mowaSufMRk_MDo9RO6oFDVH_nQdgZnb1K
